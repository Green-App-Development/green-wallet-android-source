name: Android CI

on:
  push:
    branches: [ "dapp" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10'  # Replace with your desired Flutter version
      - name: Init flutter project set up as a module
        run: |
          flutter config --no-analytics
          cd greenapp
          flutter pub get
          flutter build bundle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Load local properties file
        run: echo "${{ secrets.LOCAL_PROPERTIES }}" > local.properties
      - name: Load encoded certificate to decode and sign up
        run: echo "${{ secrets.CERT_BASE_64 }}" | base64 --decode > $GITHUB_WORKSPACE/app/cert.final
      - name: Load encoded JSON for push app bundle
        run: echo "${{ secrets.PRIVATE_WALLET_JSON }}" | base64 --decode > $GITHUB_WORKSPACE/app/private_wallet.json
      - name: Load encoded Google Services JSON
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > $GITHUB_WORKSPACE/app/google-services.json
      - name: Load encoded Google Service JSON Firebase App
        run: echo "${{ secrets.FIREBASE_JSON }}" | base64 --decode > $GITHUB_WORKSPACE/app/green_wallet_firebase.json
      - name: Uploading debug build apk to firebase app distrubution
        run: ./gradlew assembleDebug appDistributionUploadDebug
#      - name: Build with Gradle
#        run: ./gradlew publishBundle
#      - name: Build with Gradle
#        run: ./gradlew assembleRelease
#      - name: Display APK directory contents
#        run: ls $GITHUB_WORKSPACE/app/build/outputs/apk/release/
#      - name: Read permission
#        run: chmod +r $GITHUB_WORKSPACE/app/build/outputs/apk/release/app-release.apk
#      - name: Get Version Name
#        id: get_version_name
#        run: echo ::set-output name=version_name::$(grep -oP 'versionName "\K(.*)(?=")' app/build.gradle)
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ steps.get_version_name.outputs.version_name }}
#          release_name: Green Wallet ${{ steps.get_version_name.outputs.version_name }}
#      - name: Upload Release Asset
#        id: upload_release_asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: app/build/outputs/apk/release/app-release.apk
#          asset_name: app-release ${{ steps.get_version_name.outputs.version_name }}.apk
#          asset_content_type: application/vnd.android.package-archive


